Index: src/com/sshtools/common/ui/SshToolsApplicationClientPanel.java
===================================================================
RCS file: /CVS/gsi-sshterm/sshtools/src/com/sshtools/common/ui/SshToolsApplicationClientPanel.java,v
retrieving revision 1.5
diff -u -r1.5 SshToolsApplicationClientPanel.java
--- src/com/sshtools/common/ui/SshToolsApplicationClientPanel.java	7 Oct 2009 15:32:17 -0000	1.5
+++ src/com/sshtools/common/ui/SshToolsApplicationClientPanel.java	5 Nov 2009 18:03:24 -0000
@@ -69,7 +69,7 @@
 import com.sshtools.j2ssh.agent.SshAgentClient;
 import com.sshtools.j2ssh.authentication.AuthenticationProtocolState;
 import com.sshtools.j2ssh.authentication.KBIAuthenticationClient;
-import com.sshtools.j2ssh.authentication.EKEYXAuthenticationClient;
+import com.sshtools.j2ssh.authentication.GSSAPIKeyexAuthenticationClient;
 import com.sshtools.j2ssh.authentication.PasswordAuthenticationClient;
 import com.sshtools.j2ssh.authentication.PublicKeyAuthenticationClient;
 import com.sshtools.j2ssh.authentication.SshAuthenticationClient;
@@ -521,19 +522,19 @@

 	    if(supported==null) throw new IOException("There are no authentication methods which both the server and client understand.\n Cannot connect.");

-	    // If the server supports external key exchange then we SHOULD use it
-	    if (supported.contains("external-keyx")) {
+            // If the server supports external key exchange then we SHOULD use it
+            if (supported.contains("gssapi-keyex")) {
+                GSSAPIKeyexAuthenticationClient aa = new GSSAPIKeyexAuthenticationClient();
+                aa.setProperties(getCurrentConnectionProfile());
+                aa.setUsername(getCurrentConnectionProfile().getUsername());
+                result = ssh.authenticate(aa,getCurrentConnectionProfile().getHost());
+
+                if (result == AuthenticationProtocolState.COMPLETE) {
+                    authenticationComplete(newProfile);
+                    return true;
+                }
+            }

-		EKEYXAuthenticationClient aa = new EKEYXAuthenticationClient();
-		aa.setProperties(getCurrentConnectionProfile());
-		aa.setUsername(getCurrentConnectionProfile().getUsername());
-		result = ssh.authenticate(aa,getCurrentConnectionProfile().getHost());
-
-		if (result == AuthenticationProtocolState.COMPLETE) {
-		    authenticationComplete(newProfile);
-		    return true;
-		}
-	    }
 	    // If the server supports public key lets look for an agent and try
 	    // some of his keys
 	    if (supported.contains("publickey")) {
Index: src/com/sshtools/j2ssh/authentication/GSSAPIKeyexAuthenticationClient.java
===================================================================
RCS file: src/com/sshtools/j2ssh/authentication/GSSAPIKeyexAuthenticationClient.java
diff -N src/com/sshtools/j2ssh/authentication/GSSAPIKeyexAuthenticationClient.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/com/sshtools/j2ssh/authentication/GSSAPIKeyexAuthenticationClient.java	5 Nov 2009 18:03:24 -0000
@@ -0,0 +1,144 @@
+/*
+ *  GSI-SSHTools - Java SSH2 API
+ *
+ *  Copyright (C) 2005-6 CCLRC.
+ *
+ *  This program is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Library General Public License
+ *  as published by the Free Software Foundation; either version 2 of
+ *  the License, or (at your option) any later version.
+ *
+ *  You may also distribute it and/or modify it under the terms of the
+ *  Apache style J2SSH Software License. A copy of which should have
+ *  been provided with the distribution.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  License document supplied with your distribution for more details.
+ *
+ */
+
+package com.sshtools.j2ssh.authentication;
+
+import com.sshtools.j2ssh.io.*;
+import java.io.*;
+import java.util.Properties;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.globus.common.CoGProperties;
+import org.globus.gsi.*;
+import org.globus.gsi.gssapi.*;
+import org.globus.gsi.gssapi.auth.*;
+import org.globus.myproxy.MyProxy;
+import org.globus.tools.ProxyInit;
+import org.globus.tools.proxy.DefaultGridProxyModel;
+import org.globus.util.Util;
+import org.gridforum.jgss.ExtendedGSSContext;
+import org.gridforum.jgss.ExtendedGSSCredential;
+import org.ietf.jgss.*;
+
+public class GSSAPIKeyexAuthenticationClient extends SshAuthenticationClient
+{
+
+    public GSSAPIKeyexAuthenticationClient()
+    {
+    }
+
+    public final String getMethodName()
+    {
+        return "gssapi-keyex";
+    }
+
+    int attempt = 0;
+
+    public void reset()
+    {
+	attempt = 0;
+    }
+
+    public void authenticate(AuthenticationProtocolClient authenticationprotocolclient, String s)
+        throws IOException, TerminatedStateException, IllegalArgumentException
+    {
+        try
+        {
+	    if(attempt++!=0) throw new IllegalArgumentException();
+            GSSContext gsscontext = authenticationprotocolclient.getGSSContext();
+	    if(gsscontext==null) throw new IllegalArgumentException();
+            log.debug("Creating GSS context base on grid credentials.");
+
+
+
+	    /* --- MIC calculated over:
+	       string      session identifier
+	       byte        SSH_MSG_USERAUTH_REQUEST
+	       string      user name
+	       string      service
+	       string      "gssapi-keyex"
+	    */
+	    ByteArrayWriter baw = new ByteArrayWriter();
+	    baw.writeBinaryString(authenticationprotocolclient.getSessionIdentifier());
+	    baw.write(SshMsgUserAuthRequest.SSH_MSG_USERAUTH_REQUEST);
+	    baw.writeString(getUsername());
+	    baw.writeString(s);
+	    baw.writeString("gssapi-keyex");
+
+            ByteArrayWriter mic = new ByteArrayWriter();
+	    mic.writeBinaryString(gsscontext.getMIC(baw.toByteArray(), 0, baw.toByteArray().length, null));
+
+
+	    /*
+	      byte        SSH_MSG_USERAUTH_REQUEST
+	      string      user name
+	      string      service
+	      string      "gssapi-keyex"
+	      string      MIC
+	    */
+
+            log.debug("Sending gssapi-keyex user auth request.");
+            SshMsgUserAuthRequest sshmsguserauthrequest = new SshMsgUserAuthRequest(getUsername(), s, "gssapi-keyex", mic.toByteArray());
+            authenticationprotocolclient.sendMessage(sshmsguserauthrequest);
+            log.debug("Receiving user auth response.");
+            //SshMsgUserauthGssapiResponse sshmsguserauthgssapiresponse = (SshMsgUserauthGssapiResponse)authenticationprotocolclient.readMessage(52);
+
+            //log.debug("Authentication exchange complete, Context information:");
+            //log.debug("Initiator : " + gsscontext.getSrcName());
+            //log.debug("Acceptor  : " + gsscontext.getTargName());
+            //log.debug("Lifetime  : " + gsscontext.getLifetime());
+            //log.debug("Privacy   : " + gsscontext.getConfState());
+            //log.debug("Anonymity : " + gsscontext.getAnonymityState());
+        }
+        catch(GSSException gssexception)
+        {
+            gssexception.printStackTrace();
+            StringWriter stringwriter = new StringWriter();
+            gssexception.printStackTrace(new PrintWriter(stringwriter));
+            log.debug(stringwriter);
+        }
+
+    }
+
+
+    public Properties getPersistableProperties()
+    {
+        Properties properties = new Properties();
+        return properties;
+    }
+
+    public void setPersistableProperties(Properties properties)
+    {
+    }
+
+    public boolean canAuthenticate()
+    {
+        return true;
+    }
+
+
+    private static Log log;
+
+    static
+    {
+        log = LogFactory.getLog(com.sshtools.j2ssh.authentication.GSSAPIKeyexAuthenticationClient.class);
+    }
+}
Index: src/com/sshtools/j2ssh/authentication/SshAuthenticationClientFactory.java
===================================================================
RCS file: /CVS/gsi-sshterm/sshtools/src/com/sshtools/j2ssh/authentication/SshAuthenticationClientFactory.java,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 SshAuthenticationClientFactory.java
--- src/com/sshtools/j2ssh/authentication/SshAuthenticationClientFactory.java	19 Dec 2006 21:41:50 -0000	1.1.1.1
+++ src/com/sshtools/j2ssh/authentication/SshAuthenticationClientFactory.java	5 Nov 2009 18:03:24 -0000
@@ -63,7 +63,8 @@
   /**  */
   public final static String AUTH_GSS = "gssapi";
   /**  */
-  public final static String AUTH_EKEYX = "external-keyx";
+
+  public final static String AUTH_GSSAPIKEYEX = "gssapi-keyex";

   static {
     auths = new HashMap();
@@ -88,7 +89,7 @@

     auths.put(AUTH_KBI, KBIAuthenticationClient.class);
     auths.put(AUTH_GSS, com.sshtools.j2ssh.authentication.GSSAuthenticationClient.class);
-    auths.put(AUTH_EKEYX, com.sshtools.j2ssh.authentication.EKEYXAuthenticationClient.class);
+    auths.put(AUTH_GSSAPIKEYEX, com.sshtools.j2ssh.authentication.GSSAPIKeyexAuthenticationClient.class);

   }

